"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileSystemMethods = void 0;
const fs_1 = __importDefault(require("fs"));
exports.fileSystemMethods = {
    fsFileExists: (path) => {
        try {
            return fs_1.default.existsSync(path) || null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsReadFile({ path, options }) {
        try {
            return fs_1.default.readFileSync(path, options) || null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsWriteFile({ path, content, options, }) {
        try {
            fs_1.default.writeFileSync(path, content, options);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsDeleteFile: (path) => {
        try {
            fs_1.default.unlinkSync(path);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsCreateDirectory: ({ path, fileOptions, }) => {
        try {
            fs_1.default.mkdirSync(path, fileOptions);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsDeleteDirectory: ({ path, fileOptions, }) => {
        try {
            fs_1.default.rmdirSync(path, fileOptions);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsCopyFile: ({ path, newPath, mode, }) => {
        try {
            fs_1.default.copyFileSync(path, newPath, mode);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsChmod({ path, mode }) {
        try {
            fs_1.default.chmodSync(path, mode);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsAppendFile({ path, content, options, }) {
        try {
            fs_1.default.appendFileSync(path, content, options);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsRename({ path, newPath }) {
        try {
            fs_1.default.renameSync(path, newPath);
            return null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsDirExists(path) {
        try {
            return fs_1.default.existsSync(path) || null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsReadDir({ path, options }) {
        try {
            return fs_1.default.readdirSync(path, options) || null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsIsDirectory(path) {
        try {
            return fs_1.default.lstatSync(path).isDirectory() || null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
    fsIsFile(path) {
        try {
            return fs_1.default.lstatSync(path).isFile() || null;
        }
        catch (err) {
            throw new Error(`Cypress-fs Error: ${err}`);
        }
    },
};
