/// <reference types="node" />
import * as fst from "../types";
import fs from "fs";
export declare function fsExistsSync(path: string): Cypress.Chainable<boolean>;
export declare function fsReadFile(path: string, options?: any): Cypress.Chainable<unknown>;
export declare function fsWriteFile(path: string, content: string, options: fs.WriteFileOptions): void;
export declare function fsDeleteFile(path: string): void;
export declare function fsCreateDirectory(path: string, fileOptions?: fst.CreateDirOptions): void;
export declare function fsDeleteDirectory(path: string, fileOptions?: fst.DeleteDirOptions): void;
export declare const fsCopyFile: ({ path, newPath, mode, }: {
    path: string;
    newPath: string;
    mode?: number | undefined;
}) => void;
export declare const fsChmod: ({ path, mode }: {
    path: string;
    mode: number;
}) => void;
export declare const fsAppendFile: ({ path, content, }: {
    path: string;
    content: string;
}) => void;
export declare const fsRename: ({ path, newPath, }: {
    path: string;
    newPath: string;
}) => void;
export declare const fsDirExists: (path: string) => Cypress.Chainable<boolean>;
export declare const fsReadDir: (path: string, options?: fst.ReadDirOptions) => Cypress.Chainable<string[]>;
export declare const fsIsDirectory: (path: string) => Cypress.Chainable<boolean>;
export declare const fsIsFile: (path: string) => Cypress.Chainable<boolean>;
